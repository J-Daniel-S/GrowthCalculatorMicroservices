package the.best.growthvaluecalculator.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import the.best.growthvaluecalculator.responses.CalculatorResponse;
import the.best.growthvaluecalculator.util.Calculator;

@RestController
public class CalculatorController {
	
	@GetMapping("/stock-fcf")
	public ResponseEntity<CalculatorResponse> calculateStockValueFcf(
			@RequestParam long desiredReturn, 
			@RequestParam long fcf0, 
			@RequestParam long fcf1, 
			@RequestParam long fcf2, 
			@RequestParam long fcf3, 
			@RequestParam long fcf4, 
			@RequestParam long shares, 
			@RequestParam long marginOfSafety, 
			@RequestParam long currentEquity,
			@RequestParam(required= false) Long growthRate
			) {
		long[] fcf = new long[5];
		fcf[0] = fcf0;
		fcf[1] = fcf1;
		fcf[2] = fcf2;
		fcf[3] = fcf3;
		fcf[4] = fcf4;
		
		double[] percentChange = Calculator.calculatePercentChange(fcf);
		double fcfChange = Calculator.getChangeForCalc(percentChange);
		
		double fairPrice = Calculator.getFairPrice(Calculator.calculateTotalFcf(fcf, desiredReturn, currentEquity, percentChange, fcfChange), shares);
		double discountedPrice = Calculator.getDiscountedPrice(fairPrice, marginOfSafety/100);
		
		return ResponseEntity.ok(new CalculatorResponse(
				percentChange, fcfChange, fairPrice, discountedPrice
				));
	}
	
	@GetMapping("/stock")
	public ResponseEntity<CalculatorResponse> calculateStockValue(
			@RequestParam long desiredReturn, 
			@RequestParam long cf0, 
			@RequestParam long cf1, 
			@RequestParam long cf2, 
			@RequestParam long cf3, 
			@RequestParam long cf4, 
			@RequestParam long capex0, 
			@RequestParam long capex1, 
			@RequestParam long capex2, 
			@RequestParam long capex3, 
			@RequestParam long capex4, 
			@RequestParam long shares, 
			@RequestParam long marginOfSafety, 
			@RequestParam long currentEquity,
			@RequestParam(required= false) Long growthRate
			) {
		
		long[] cf = new long[5];
		cf[0] = cf0;
		cf[1] = cf1;
		cf[2] = cf2;
		cf[3] = cf3;
		cf[4] = cf4;
		
		long[] capex = new long[5];
		capex[0] = capex0;
		capex[1] = capex1;
		capex[2] = capex2;
		capex[3] = capex3;
		capex[4] = capex4;
		
		System.out.println("Initial margin: " + marginOfSafety);
		
		long[] fcf = Calculator.calculateFreeCashFlow(cf, capex);
		
		double[] percentChange = Calculator.calculatePercentChange(fcf);
		double fcfChange = Calculator.getChangeForCalc(percentChange);
		
		double fairPrice = Calculator.getFairPrice(Calculator.calculateTotalFcf(fcf, desiredReturn, currentEquity, percentChange, fcfChange), shares);
		double discountedPrice = Calculator.getDiscountedPrice(fairPrice, (double) marginOfSafety/100);
		
		return ResponseEntity.ok(new CalculatorResponse(
				percentChange, fcfChange, fairPrice, discountedPrice
				));
	}
	
	@GetMapping("/fixed")
	public double calculateFixedValue(
			@RequestParam long principle, 
			@RequestParam double interest,
			@RequestParam int length,
			@RequestParam int compoundFrequency
			) {
		return Calculator.calculateTotal(principle, interest, length, compoundFrequency);

	}
	
}
